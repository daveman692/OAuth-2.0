<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "http://xml.resource.org/authoring/rfc2629.dtd" [
    <!ENTITY RFC2119 PUBLIC '' "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
    <!ENTITY RFC2119 PUBLIC '' "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml">
]>
<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="info" docName="draft-recordon-oauth2-01" ipr="trust200902">
    <front>
        <title>OAuth 2.0 DRAFT</title>
        <author fullname='David Recordon' surname='Recordon' initials='D.' role='editor'>
            <organization>Facebook, Inc</organization>
            <address>
                <email>davidrecordon@facebook.com</email>
            </address>
        </author>
        <date year="2010" month="Mar"/>

        <abstract>
            <t>OAuth 2.0 provides a method for an application (client) to access the Protected Resource hosted on a server on behalf of a resource owner (such as a different client or an end-user).  It provides a process for users to authorize third-party access to their protected resources via a variety of authorization profiles. These profiles generally do not include having to share their credentials (typically, a username and password pair).  A server can additionally delegate authorization to one or more authorities (authorization server) which issue access tokens to clients.</t>
        </abstract>
    </front>

    <middle>
        <section title="Introduction">
            <t>This specification consists of two major parts: <xref target='get_token'>Getting an Access Token</xref> and <xref target='access_resource'>Accessing a Protected Resource</xref>.  The first part defines multiple authorization profiles describing how a client may obtain an access token when acting autonomously or on behalf of an end-user.  They involve resource owners authorizing client access to their resources, by authenticating directly with the server and provisioning tokens to the client for use with the authentication method.  The second part defines a method for making authenticated HTTP requests using access tokens either protected via TLS/SSL or by using an access token combined with an access token secret. The access token both identifies the client making the request as well as the resource owner on whose behalf the request is being made.</t>

            <t>The use of OAuth with any other transport protocol than <xref target='RFC2616'>HTTP</xref> is undefined.</t>

            <t>TODO: This section should provide a longer description of the protocol flows and the evolution from OAuth 1.0. Both OAuth 1.0 and WRAP contain fairly complete introductory sections.  I think that the WRAP one is a bit too long and we should shoot for this section being a little over two pages (including terminology).</t>

            <section title="Acknowledgements">
                <t>This (early) draft was written pretty quickly and is heavily based on <xref target="draft-hammer-oauth-10">The OAuth 1.0 Protocol</xref>, <xref target="draft-hardt-oauth-01">OAuth WRAP</xref> and further discussion on the <eref target="https://www.ietf.org/mailman/listinfo/oauth">IETF OAuth Working Group mailing list</eref>.  Those authors and editors include Allen Tom (Yahoo!), Brian Eaton (Google), Dick Hardt, Eran Hammer-Lahav (Yahoo!) and Yaron Goland (Microsoft).</t>
                <t>To provide feedback on this draft join the OAuth Working Group: <eref target="http://www.ietf.org/dyn/wg/charter/oauth-charter.html">http://www.ietf.org/dyn/wg/charter/oauth-charter.html</eref>.</t>
            </section>

            <section title="Terminology">
                <t><list style="hanging">
                    <t hangText="access token">An unique identifier issued by the authorization server and used by the client to make authenticated requests on behalf of the user whose authorization has been obtained by the client.  TODO (rephrase): When using SSL it is a short lived bearer token and when using signatures it is accompanied by an additional secret.</t>

                    <t hangText="authorization server">A server that issues access tokens to clients after successful authorization. May be the same entity as the server hosting protected resources.</t>

                    <t hangText="client">An HTTP client (per <xref target='RFC2616' />) capable of making OAuth-authenticated requests for protected resources.</t>

                    <t hangText="client identifier">An unique identifier issued by the authorization server and used used by the client to identify itself to the authorization server.</t>

                    <t hangText="client secret:">An unique identifier issued by the authorization server and used by the client to establish ownership of the client identifier.</t>

                    <t hangText="protected resource">An access-restricted resource which can be obtained from the server using an OAuth-authenticated request. May be the same entity as the authorization server.</t>

                    <t hangText="refresh token">An unique long lived bearer token used by a client to acquire access tokens from an authorization server.</t>

                    <t hangText="resource owner">An entity (generally an end-user) who can authenticate to the authorization server such that it issues the client an access token.</t>

                    <t hangText="server">An HTTP server (per <xref target='RFC2616' />) capable of accepting OAuth-authenticated requests.</t>
                  </list></t>

                <section title="Endpoints">
                    <t>The authorization server MUST advertise the URIs of the following three endpoints:</t>
                    <t><list style="hanging">
                        <t hangText="access token request">The authorization server endpoint used by the client to obtain an access token via a HTTP "POST" request using one of the authorization profiles (<xref target="get_token" />) or by refreshing an access token (<xref target="refresh_token" />).</t>

                        <t hangText="API request">The protected resource endpoint used by the client to make OAuth-authenticated requests (<xref target="access_resource" />).</t>

                        <t hangText="user authorization request">The authorization server endpoint where the client sends the resource owners's user-agent via a HTTP "GET" request to make an authorization decision using one of the authorization profiles (<xref target="get_token" />).</t>
                    </list></t>

                    <t>The three URIs advertised by the server MAY include a query component as defined by <xref target="RFC3986" /> section 3, but if present, the query MUST NOT contain any parameters beginning with the "oauth_" prefix, to avoid conflicts with the protocol parameters added to the URIs when used.</t>

                    <t>The methods in which the servers advertise and document its three endpoints are beyond the scope of this specification. Clients should avoid making assumptions about the size of tokens and other server-generated values, which are left undefined by this specification. However it is strongly RECOMMENDED that authorization servers make their identifiers, secrets, and tokens not over 255 characters in length in order to ease client implementations. In addition, protocol parameters MAY include values which require encoding when transmitted.  Clients and servers should not make assumptions about the possible range of their values.</t>
                </section>
            </section>

            <section title="Notational Conventions">
                <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119" />.</t>
            </section>
        </section>

        <section title="Getting an Access Token" anchor="get_token">
            <t>This specification defines six core authorization profiles which are used by a client to request an access token from authorization servers. An authorization server MUST implement at least one of the following profiles.</t>

            <t>Common scenarios involve the resource owner delegating to a client to act on their behalf, adding another party (the resource owner) to the protocol. In these profiles, the client receives a refresh token when it acquires the first access token. When an access token expires, the client presents the refresh token to acquire a new access token. Refresh tokens are sensitive as they represent long-lived permissions to access a Protected Resource and are always transmitted using HTTPS.</t>

            <t>Unlike the others, <xref target="client_profile">Client Identifier and Secret profile</xref> is intended for a client acting on behalf of itself and not a separate resource owner. For example, when a client is accessing non-private data or modifying data about itself.</t>

            <section title="Web App Profile" anchor="web_profile">
                <t>This profile is suitable when the client is a web application calling the protected resource on behalf of a resource owner. It enables clients to act on behalf of resource owners without acquiring an end-user's credentials.</t>

                <t>Prior to making a request using this profile, the client MUST have obtained a client identifier and user authorization request endpoint URI from the authorization server. The authorization server MAY require the client to pre-register their callback URI.</t>

                <t>The client MUST first send the resource owners's user-agent to the authorization server's user authorization request endpoint. The client constructs the request URI by adding the following REQUIRED query parameters to the user authorization endpoint URI:</t>
                <t><list style="hanging">
                    <t hangText="oauth_mode">The parameter value MUST be set to "profile_web_app" (case sensitive).</t>
                    <t hangText="oauth_client_identifier">The client identifier.</t>
                    <t hangText="oauth_callback_url">An absolute URI to which the authorization server will redirect the resource owner back when the resource owner authorization step is completed.</t>
                </list></t>

                <t>The client MAY also include the following OPTIONAL parameters:</t>
                <t><list style="hanging">
                    <t hangText="oauth_client_state">An opaque value that clients can use to maintain state associated with this request.</t>
                    <t hangText="oauth_scope">If the authorization server has defined a manner for the client to request certain capabilities of the access token, this parameter SHOULD be used to do so.</t>
                </list></t>

                <t>The client directs the resource owner to the constructed URI using an HTTP redirection response, or by other means available to it via the resource owner's user-agent.  The request MUST use the HTTP "GET" method.</t>

                <t>For example, the client directs the resource owner's user-agent to make the following HTTPS requests:</t>
                <figure><artwork><![CDATA[
    GET /user_authorization?oauth_mode=profile_web_app&oauth_client_identifier=s6BhdRkqt3&oauth_callback_url=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1
    Host: server.example.com
                ]]></artwork></figure>

                <t>The way in which the server handles the user authorization request, including whether it uses a secure channel such as TLS/SSL is beyond the scope of this specification.  However, the server MUST first verify the identity of the resource owner. If the resource owner approves the authorization request, the authorization server MUST generate a verification code and associate it with the client identifier and callback URI.</t>

                <t>After receiving an authorization decision from the resource owner, the server redirects the resource owner to the callback URI if one was provided in the "oauth_callback" parameter or pre-registered by other means. The authorization server constructs the request URI by adding one of the two following REQUIRED parameters to the callback URI query component depending on if the resource owner approved (oauth_verification_code) or declined (oauth_error_reason) the authorization request:</t>
                <t><list style="hanging">
                    <t hangText="oauth_verification_code">The verification code.</t>
                    <t hangText="oauth_error_reason">The parameter value MUST be set to "user_denied" (case sensitive).</t>
                </list></t>

                <t>The authorization server MAY also include the following parameters:</t>
                    <t><list style="hanging">
                        <t hangText="oauth_client_state">REQUIRED if the client sent the parameter in its request.</t>
                </list></t>

                <t>If the callback URI already includes a query component as defined by <xref target="RFC3986" /> section 3, the server MUST append the OAuth parameters to the end of the existing query. The callback URI's query component MUST NOT contain any parameters beginning with the "oauth_" prefix.</t>

                <t>For example, the server redirects the resource owner's user-agent to make one of the following HTTPS "GET" requests:</t>
                <figure><artwork><![CDATA[
    GET /cb?oauth_verification_code=i1WsRn1uB1 HTTP/1.1
    Host: client.example.com
                ]]></artwork></figure>

                <figure><artwork><![CDATA[
    GET /cb?oauth_error_reason=user_denied HTTP/1.1
    Host: client.example.com
                ]]></artwork></figure>

                <t>If the client receives a verification code, it constructs an HTTP "POST" request to the access token request endpoint and includes the following REQUIRED parameters:</t>
                <t><list style="hanging">
                    <t hangText="oauth_mode">The parameter value MUST be set to "profile_web_app" (case sensitive).</t>
                    <t hangText="oauth_client_identifier">The client identifier.</t>
                    <t hangText="oauth_client_secret">The client secret.</t>
                    <t hangText="oauth_verification_code">The verification code.</t>
                    <t hangText="oauth_callback_url">The callback URI from the user authorization request.</t>
                </list></t>

                <t>Since the request results in the transmission of plain text credentials in the HTTP request and response, the authorization server MUST require the use of a transport-layer mechanism such as TLS or SSL (or a secure channel with equivalent protections).</t>

                <t>For example, the client makes the following HTTPS request:</t>
                <figure><artwork><![CDATA[
    POST /access_token HTTP/1.1
    Host: server.example.com
   oauth_client_identifier=s6BhdRkqt3&oauth_client_secret=gX1fBat3bV&oauth_verification_code=i1WsRn1uB1&oauth_callback_url=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
                ]]></artwork></figure>

                <t>If the request is authorized, the access token is included in the HTTP response body using the "application/x-www-form-urlencoded" content type as defined by <xref target="W3C.REC-html40-19980424" /> with a 200 status code (OK). The response contains the following REQUIRED parameter:</t>
                <t><list style="hanging">
                    <t hangText="oauth_access_token">The access token.</t>
                </list></t>

                <t>The authorization server MAY also include the following parameters:</t>
                <t><list style="hanging">
                    <t hangText="oauth_access_token_expires_in">The lifetime of the access token in seconds.</t>
                    <t hangText="oauth_refresh_token">The refresh token.</t>
                </list></t>

                <t>For example:</t>
                <figure><artwork><![CDATA[
    HTTP/1.1 200 OK
    Content-Type: application/x-www-form-urlencoded

    oauth_access_token=SlAV32hkKG&oauth_refresh_token=8xLOxBtZp8
                ]]></artwork></figure>

                <t>The server must retain the scope, duration, and other attributes approved by the resource owner, and enforce these restrictions when receiving a client request made with the tokens issued.</t>

                <t>Once the client receives and stores the token credentials, it can proceed to access protected resources on behalf of the resource owner by making authenticated requests (<xref target='access_resource' />) using the access token received.</t>

                <t>If the authorization server is unable to issue an access token to the client, the HTTP response body uses the "application/x-www-form-urlencoded" content type as defined by <xref target="W3C.REC-html40-19980424" /> with a 401 status code (Unauthorized). The response contains the following OPTIONAL parameter:</t>
                <t><list style="hanging">
                    <t hangText="oauth_error_reason">Value must be one of "callback_url_mismatch" or "expired_verification_code" (case sensitive).</t>
                </list></t>

                <t>For example:</t>
                <figure><artwork><![CDATA[
    HTTP/1.1 401 Authorization Required
    WWW-Authenticate: OAuth realm="https://server.example.com/"

    oauth_error_reason=expired_verification_code
                ]]></artwork></figure>
            </section>

            <section title="Pure Client Profile">
                <t>The Pure Client Profile is similar to the <xref target="web_profile">Web App Profile</xref>, but it has different security characteristics. Pure client apps are applications that live entirely in JavaScript, on the desktop, a mobile device, or in other environments where the code does not have easy access to a server. These applications have the ability to display a web page to the user, but cannot receive the response on a server. Because the entirety of the client is downloaded to the resource owner's user-agent, it is not possible to completely protect the client secret. This profile allows for authorization while taking those security considerations into account.</t>

                <t>Because there is no client secret to ensure authenticity, both the client and authorization server should take some extra precautions when using this profile. Specifically, as the access token flows directly to the user-agent, it should only be used when it is acceptable for the end-user to have direct access to the access token. Additionally, care should be taken to choose a good callback URL, as described below.</t>

                <t>Prior to making a request using this profile, the client MUST have obtained a client identifier and user authorization request endpoint URI from the authorization server. The authorization server SHOULD require the client to pre-register their callback URI.</t>

                <t>The client MUST first send the resource owners's user-agent to the authorization server's user authorization request endpoint. The client constructs the request URI by adding the following REQUIRED query parameters to the user authorization endpoint URI:</t>
                <t><list style="hanging">
                    <t hangText="oauth_mode">The parameter value MUST be set to "profile_pure_client" (case sensitive).</t>
                    <t hangText="oauth_client_identifier">The client identifier.</t>
                    <t hangText="oauth_callback_url">An absolute URI to which the authorization server will redirect the resource owner back when the resource owner authorization step is completed. The client MUST either make use of a transport-layer mechanism such as TLS or SSL (or a secure channel with equivalent protections) for the callback URI or include a fragment identifier ("#") as defined by <xref target="RFC3986" /> section 3.5 in the URI to prevent transmission of plain text credentials.</t>
                </list></t>

                <t>The client MAY also include the following OPTIONAL parameters:</t>
                <t><list style="hanging">
                    <t hangText="oauth_client_state">An opaque value that clients can use to maintain state associated with this request.</t>
                    <t hangText="oauth_scope">If the authorization server has defined a manner for the client to request certain capabilities of the access token, this parameter SHOULD be used to do so.</t>
                </list></t>

                <t>The client directs the resource owner to the constructed URI using an HTTP redirection response, or by other means available to it via the resource owner's user-agent.  The request MUST use the HTTP "GET" method.</t>

                <t>For example, the client directs the resource owner's user-agent to make one of the following HTTPS requests:</t>
                <figure><artwork><![CDATA[
    GET /user_authorization?oauth_mode=profile_pure_client&oauth_client_identifier=s6BhdRkqt3&oauth_callback_url=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1
    Host: server.example.com
                ]]></artwork></figure>
                <figure><artwork><![CDATA[
    GET /user_authorization?oauth_mode=profile_pure_client&oauth_client_identifier=s6BhdRkqt3&oauth_callback_url=http%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb# HTTP/1.1
    Host: server.example.com
                ]]></artwork></figure>

                <t>The way in which the server handles the user authorization request, including whether it uses a secure channel such as TLS/SSL is beyond the scope of this specification.  However, the server MUST first verify the identity of the resource owner.</t>

                <t>TODO: Marcel to write/make sense here.The server SHOULD also verify that the callback URI provided in the "oauth_callback" parameter is the callback URI the client has pre-registered.</t>

                <t>After receiving an authorization decision from the resource owner, the server redirects the resource owner to the callback URI if one was provided in the "oauth_callback" parameter or pre-registered by other means. The authorization server constructs the request URI by adding the following REQUIRED parameter to the callback URI query component:</t>
                <t><list style="hanging">
                    <t hangText="oauth_access_token">The access token.</t>
                </list></t>

                <t>The authorization server MAY also include the following parameters:</t>
                <t><list style="hanging">
                    <t hangText="oauth_access_token_expires_in">The lifetime of the access token in seconds.</t>
                    <t hangText="oauth_refresh_token">The refresh token.</t>
                </list></t>

                <t>If the callback URI already includes a query component as defined by <xref target="RFC3986" /> section 3, the server MUST append the OAuth parameters to the end of the existing query. The callback URI's query component MUST NOT contain any parameters beginning with the "oauth_" prefix.</t>

                <t>For example, the server redirects the resource owner's user-agent to make one of the following HTTPS/HTTP "GET" requests:</t>
                <figure><artwork><![CDATA[
    GET /cb?oauth_access_token=FJQbwq9OD8&oauth_access_token_expires_in=10800 HTTP/1.1
    Host: client.example.com
                ]]></artwork></figure>
                <figure><artwork><![CDATA[
    GET /cb#?oauth_access_token=FJQbwq9OD8&oauth_access_token_expires_in=10800 HTTP/1.1
    Host: client.example.com
                ]]></artwork></figure>

                <t>The server must retain the scope, duration, and other attributes approved by the resource owner, and enforce these restrictions when receiving a client request made with the tokens issued.</t>

                <t>Once the client receives and stores the token credentials, it can proceed to access protected resources on behalf of the resource owner by making authenticated requests (<xref target='access_resource' />) using the access token received.</t>

                <t>If the request fails verification, the authorization server SHOULD respond with the appropriate HTTP response status code. The authorization server MAY include further details about why the request was rejected in the response body.</t>

                <t>For example:</t>
                <figure><artwork><![CDATA[
    HTTP/1.1 401 Authorization Required
    WWW-Authenticate: OAuth realm="https://server.example.com/"
                ]]></artwork></figure>
            </section>

            <section title="Rich App Profile">
                <t>TODO: Should be possible to combine with the Pure Client profile. For desktop applications which can open or embed a web browser.</t>
            </section>

            <section title="Device Profile">
                <t>The Device Profile is suitable when the client is a device which does not have an easy data-entry method (e.g. game consoles or entertainment centers), but where the end-user has access to a separate computer with simple data-entry methods (e.g. their home computer, a laptop or a smartphone).</t>

                <t>Prior to making a request using this profile, the client MUST have obtained a client identifier and access token request endpoint URI from the authorization server.</t>

                <t>The client constructs an HTTP "POST" request to the access token request endpoint and includes the following REQUIRED parameters:</t>
                <t><list style="hanging">
                    <t hangText="oauth_mode">The parameter value MUST be set to "profile_device" (case sensitive).</t>
                    <t hangText="oauth_client_identifier">The client identifier.</t>
                </list></t>

                <t>The client MAY also include the following OPTIONAL parameters:</t>
                <t><list style="hanging">
                    <t hangText="oauth_scope">If the authorization server has defined a manner for the client to request certain capabilities of the access token, this parameter SHOULD be used to do so.</t>
                </list></t>

                <t>Since the request results in the transmission of temporary plain text credentials in the HTTP response, the authorization server MUST require the use of a transport-layer mechanism such as TLS or SSL (or a secure channel with equivalent protections).</t>

                <t>For example, the client makes the following HTTPS request:</t>
                <figure><artwork><![CDATA[
   POST /access_token HTTP/1.1
   Host: server.example.com
   oauth_client_identifier=s6BhdRkqt3
                ]]></artwork></figure>

                <t>Upon receiving an authorization request by the client, the authorization server generates a device verification code and a user verification code. These are included in the HTTP response body using the "application/x-www-form-urlencoded" content type as defined by <xref target="W3C.REC-html40-19980424" /> with a 200 status code (OK). The response contains the following REQUIRED parameters:</t>
                <t><list style="hanging">
                    <t hangText="oauth_device_code">The device verification code.</t>
                    <t hangText="oauth_user_code">The user verification code.</t>
                    <t hangText="oauth_verification_url">The user verification URL on the authorization server.</t>
                </list></t>

                <t>The authorization server MAY also include the following parameters:</t>
                <t><list style="hanging">
                    <t hangText="oauth_verification_token_expires_in">The lifetime of the two verification codes in seconds.</t>
                    <t hangText="oauth_verification_rate_limit">The minimum amount of time in seconds that the client SHOULD wait between polling requests to the device authorization URL.</t>
                </list></t>

                <t>For example:</t>
                <figure><artwork><![CDATA[
    HTTP/1.1 200 OK
    Content-Type: application/x-www-form-urlencoded

    oauth_device_code=74tq5miHKB&oauth_user_code=94248&oauth_verification_url=http%3A%2F%2Fwww%2Eexample%2Ecom%2Fdevice&oauth_verification_rate_limit=3
                ]]></artwork></figure>

                <t>The client MUST display the user verification URL and the user verification code to the end-user, instruct them to visit the user verification URL in a web browser, and to enter the user verification token upon doing so (a user authorization request).</t>

                <t>The way in which the authorization server handles the user authorization request, including whether it uses a secure channel such as TLS/SSL is beyond the scope of this specification.  However, the server MUST first verify the identity of the resource owner. After doing so, the server MUST prompt the end-user to enter the user verification code.</t>

                <t>The authorization server MUST verify that the user verification code is valid and MAY verify that the client is authorized to use this profile.  If the request is authorized, the authorization server directs the end-user to go back to the client device and follow its instructions.</t>

                <t>The client MAY have an interface element (such as a button) that the end-user interacts with to communicate that they have finished the authorization process. The client MAY initiate the following request at an arbitrary but reasonable interval in order to create a more responsive user experience though MUST NOT exceed the verification rate limit if one is specified. The Client MAY both poll and have an interface element, but MUST NOT have neither.</t>

                <t>The client constructs an HTTP "POST" request to the access token request endpoint and includes the following REQUIRED parameters:</t>
                <t><list style="hanging">
                    <t hangText="oauth_mode">The parameter value MUST be set to "profile_device" (case sensitive).</t>
                    <t hangText="oauth_client_identifier">The client identifier.</t>
                    <t hangText="oauth_device_verification_code">The device verification code.</t>
                </list></t>

                <t>Since the request results in the transmission of plain text credentials in the HTTP response, the authorization server MUST require the use of a transport-layer mechanism such as TLS or SSL (or a secure channel with equivalent protections).</t>

                <t>For example, the client makes the following HTTPS request:</t>
                <figure><artwork><![CDATA[
    POST /access_token HTTP/1.1
    Host: server.example.com
    oauth_client_identifier=s6BhdRkqt3&oauth_device_verification_code=J2vC42OifV
                ]]></artwork></figure>

                <t>If the request is authorized, the access token is included in the HTTP response body using the "application/x-www-form-urlencoded" content type as defined by <xref target="W3C.REC-html40-19980424" /> with a 200 status code (OK). The response contains the following REQUIRED parameter:</t>
                <t><list style="hanging">
                    <t hangText="oauth_access_token">The access token.</t>
                </list></t>

                <t>The authorization server MAY also include the following parameters:</t>
                <t><list style="hanging">
                    <t hangText="oauth_access_token_expires_in">The lifetime of the access token in seconds.</t>
                    <t hangText="oauth_refresh_token">The refresh token.</t>
                </list></t>

                <t>For example:</t>
                <figure><artwork><![CDATA[
    HTTP/1.1 200 OK
    Content-Type: application/x-www-form-urlencoded

    oauth_access_token=FJQbwq9OD8&oauth_access_token_expires_in=600
                ]]></artwork></figure>

                <t>The server must retain the scope, duration, and other attributes approved by the resource owner, and enforce these restrictions when receiving a client request made with the tokens issued.</t>

                <t>Once the client receives and stores the token credentials, it can proceed to access protected resources on behalf of the resource owner by making authenticated requests (<xref target='access_resource' />) using the access token received.</t>

                <t>If the authorization server is unable to issue an access token to the client, the HTTP response body uses the "application/x-www-form-urlencoded" content type as defined by <xref target="W3C.REC-html40-19980424" /> with a 401 status code (Unauthorized). The response contains the following REQUIRED parameter:</t>
                <t><list style="hanging">
                    <t hangText="oauth_error_reason">Value must be one of "authorization_declined", "authorization_pending", "slow_down", or "verification_code_expired" (case sensitive).</t>
                </list></t>

                <t>For example:</t>
                <figure><artwork><![CDATA[
    HTTP/1.1 401 Authorization Required
    WWW-Authenticate: OAuth realm="https://server.example.com/"

    oauth_error_reason=authorization_pending
                ]]></artwork></figure>
            </section>

            <section title="Username and Password Profile">
                <t>This profile is used when the authorization server generally trusts the client to temporarily collect the end-user's username and password and it is impossible to use one of the other authorization profiles. This profile enables a client to act on behalf of the resource owner without having to permanently store their username and password.</t>

                <t>Prior to making a request using this profile, the client MUST have obtained a client identifier, client secret, and access token request endpoint URI from the authorization server. How the client prompts the resource owner for their username and password is beyond the scope of this specification. The client MUST discard the resource owner's username and password once an access token has been obtained.</t>

                <t>The client constructs an HTTP "POST" request to the access token request endpoint and includes the following REQUIRED parameters:</t>
                <t><list style="hanging">
                    <t hangText="oauth_mode">The parameter value MUST be set to "profile_username_password" (case sensitive).</t>
                    <t hangText="oauth_client_identifier">The client identifier.</t>
                    <t hangText="oauth_username">The resource owner's username.</t>
                    <t hangText="oauth_password">The resource owner's password.</t>
                </list></t>

                <t>The client MAY also include the following OPTIONAL parameters as well as any additional parameters as defined by the authorization server:</t>
                <t><list style="hanging">
                    <t hangText="oauth_scope">If the authorization server has defined a manner for the client to request certain capabilities of the access token, this parameter SHOULD be used to do so.</t>
                </list></t>

                <t>Since the request results in the transmission of plain text credentials in both the HTTP request and response, the authorization server MUST require the use of a transport-layer mechanism such as TLS or SSL (or a secure channel with equivalent protections).</t>

                <t>For example, the client makes the following HTTPS request:</t>
                <figure><artwork><![CDATA[
    POST /access_token HTTP/1.1
    Host: server.example.com
    oauth_client_identifier=s6BhdRkqt3&oauth_client_secret=8eSEIpnqmM&oauth_username=daveman692&oauth_password=1password
                ]]></artwork></figure>

                <t>The authorization server MUST verify that the resource owner's credentials are accurate and MAY verify that the client is authorized to use this profile. If the request is authorized, the access token is included in the HTTP response body using the "application/x-www-form-urlencoded" content type as defined by <xref target="W3C.REC-html40-19980424" /> with a 200 status code (OK).</t>

                <t>The response contains the following REQUIRED parameter:</t>
                <t><list style="hanging">
                    <t hangText="oauth_access_token">The access token.</t>
                </list></t>

                <t>The authorization server MAY also include the following parameters:</t>
                <t><list style="hanging">
                    <t hangText="oauth_access_token_expires_in">The lifetime of the access token in seconds.</t>
                    <t hangText="oauth_refresh_token">The refresh token.</t>
                </list></t>

                <t>For example:</t>
                <figure><artwork><![CDATA[
    HTTP/1.1 200 OK
    Content-Type: application/x-www-form-urlencoded

    oauth_access_token=FJQbwq9OD8&oauth_refresh_token=gO3CHNqpH8
                ]]></artwork></figure>

                <t>The server must retain the scope, duration, and other attributes approved by the resource owner, and enforce these restrictions when receiving a client request made with the tokens issued.</t>

                <t>Once the client receives and stores the token credentials, it can proceed to access protected resources on behalf of the resource owner by making authenticated requests (<xref target='access_resource' />) using the access token received.</t>

                <t>If the request fails verification, the authorization server SHOULD respond with the appropriate HTTP response status code. The authorization server MAY include further details about why the request was rejected in the response body.</t>

                <t>For example:</t>
                <figure><artwork><![CDATA[
    HTTP/1.1 401 Authorization Required
    WWW-Authenticate: OAuth realm="https://server.example.com/"
                ]]></artwork></figure>
            </section>

            <section title="Client Identifier and Secret Profile" anchor="client_profile">
                <t>This profile is suitable when the client is also the resource owner and thus not accessing protected resources within the context of a given end-user. For example, when a client is accessing non-private data or modifying data about itself. This profile SHOULD NOT be used when the client is acting on behalf of an end-user.</t>

                <t>Prior to making a request using this profile, the client MUST have obtained a client identifier, client secret, and access token request endpoint URI from the authorization server.</t>

                <t>The client constructs an HTTP "POST" request to the access token request endpoint and includes the following REQUIRED parameters:</t>
                <t><list style="hanging">
                    <t hangText="oauth_mode">The parameter value MUST be set to "profile_client" (case sensitive).</t>
                    <t hangText="oauth_client_identifier">The client identifier.</t>
                    <t hangText="oauth_client_secret">The client secret.</t>
                </list></t>

                <t>The client MAY also include the following OPTIONAL parameters:</t>
                <t><list style="hanging">
                    <t hangText="oauth_scope">If the authorization server has defined a manner for the client to request certain capabilities of the access token, this parameter SHOULD be used to do so.</t>
                </list></t>

                <t>Since the request results in the transmission of plain text credentials in both the HTTP request and response, the authorization server MUST require the use of a transport-layer mechanism such as TLS or SSL (or a secure channel with equivalent protections).</t>

                <t>For example, the client makes the following HTTPS request:</t>
                <figure><artwork><![CDATA[
    POST /access_token HTTP/1.1
    Host: server.example.com
    oauth_client_identifier=s6BhdRkqt3&oauth_client_secret=8eSEIpnqmM
                ]]></artwork></figure>

                <t>The authorization server MUST verify that the resource owner has authorized the provisioning of an access token to the client. If the request is authorized, the access token is included in the HTTP response body using the "application/x-www-form-urlencoded" content type as defined by <xref target="W3C.REC-html40-19980424" /> with a 200 status code (OK).</t>

                <t>The response contains the following REQUIRED parameter:</t>
                <t><list style="hanging">
                    <t hangText="oauth_access_token">The access token.</t>
                </list></t>

                <t>The authorization server MAY also include the following parameters:</t>
                <t><list style="hanging">
                    <t hangText="oauth_access_token_expires_in">The lifetime of the access token in seconds.</t>
                    <t hangText="oauth_refresh_token">The refresh token.</t>
                </list></t>

                <t>For example:</t>
                <figure><artwork><![CDATA[
    HTTP/1.1 200 OK
    Content-Type: application/x-www-form-urlencoded

    oauth_access_token=FJQbwq9OD8&oauth_refresh_token=gO3CHNqpH8
                ]]></artwork></figure>

                <t>The server must retain the scope, duration, and other attributes approved by the resource owner, and enforce these restrictions when receiving a client request made with the tokens issued.</t>

                <t>Once the client receives and stores the token credentials, it can proceed to access protected resources on behalf of the resource owner by making authenticated requests (<xref target='access_resource' />) using the access token received.</t>

                <t>If the request fails verification, the authorization server SHOULD respond with the appropriate HTTP response status code. The authorization server MAY include further details about why the request was rejected in the response body.</t>

                <t>For example:</t>
                <figure><artwork><![CDATA[
    HTTP/1.1 401 Authorization Required
    WWW-Authenticate: OAuth realm="https://server.example.com/"
                ]]></artwork></figure>
            </section>
        </section>

        <section title="Refreshing an Access Token" anchor="refresh_token">
            <t>Authorization servers MAY issue access tokens that expire and thus require clients to refresh them. A client determines that an access token needs refreshing either by using the access token's expiration information or upon receiving the HTTP 401 Unauthorized response when accessing protected resources per <xref target="access_resource" />.</t>

            <t>Prior to making a request using this profile, the client MUST have obtained a client identifier, client secret, and access token request endpoint URI from the authorization server.</t>

            <t>The client constructs an HTTP "POST" request to the access token request endpoint and includes the following REQUIRED parameters:</t>
            <t><list style="hanging">
                <t hangText="oauth_mode">The parameter value MUST be set to "refresh_token" (case sensitive).</t>
                <t hangText="oauth_client_identifier">The client identifier.</t>
                <t hangText="oauth_client_secret">The client secret.</t>
                <t hangText="oauth_refresh_token">The refresh token associated with the access token to be refreshed.</t>
            </list></t>

            <t>Since the request results in the transmission of plain text credentials in both the HTTP request and response, the authorization server MUST require the use of a transport-layer mechanism such as TLS or SSL (or a secure channel with equivalent protections).</t>

            <t>For example, the client makes the following HTTPS request:</t>
            <figure><artwork><![CDATA[
POST /refresh_token HTTP/1.1
Host: server.example.com
oauth_client_identifier=s6BhdRkqt3&oauth_client_secret=8eSEIpnqmM&oauth_refresh_token=n4E9O119d
            ]]></artwork></figure>

            <t>The authorization server MUST verify that the resource owner has still authorized the provisioning of an access token to the client and that the refresh token is valid. If the request is authorized, the access token is included in the HTTP response body using the "application/x-www-form-urlencoded" content type as defined by <xref target="W3C.REC-html40-19980424" /> with a 200 status code (OK).</t>

            <t>The response contains the following REQUIRED parameters:</t>
            <t><list style="hanging">
                <t hangText="oauth_access_token">The access token.</t>
            </list></t>

            <t>The authorization server MAY also include the following parameters:</t>
            <t><list style="hanging">
                <t hangText="oauth_access_token_expires_in">The lifetime of the access token in seconds.</t>
            </list></t>

            <t>For example:</t>
            <figure><artwork><![CDATA[
    HTTP/1.1 200 OK
    Content-Type: application/x-www-form-urlencoded

    oauth_access_token=8F44J2HGMl
            ]]></artwork></figure>

            <t>If the request fails verification, the authorization server SHOULD respond with the appropriate HTTP response status code. The authorization server MAY include further details about why the request was rejected in the response body.</t>

            <t>For example:</t>
            <figure><artwork><![CDATA[
    HTTP/1.1 401 Authorization Required
    WWW-Authenticate: OAuth realm="https://server.example.com/"
            ]]></artwork></figure>
        </section>

        <section title="Accessing a Protected Resource" anchor="access_resource">
            <t>OAuth 2.0 supports the ability for clients to make protected resource requests either by using TLS/SSL (<xref target="using_ssl" />) or by signing their HTTP request with shared secrets (<xref target="using_signatures" />). Protected resources MUST support clients making authenticated requests via TLS/SSL (<xref target="using_ssl" />) and MAY choose to also support signatures (<xref target="using_signatures" />). It is RECOMMENDED that clients make authenticated requests via TLS/SSL.</t>

            <section title="Using TLS/SSL" anchor="using_ssl">
                <t>When using TLS/SSL, clients MUST present an access token to authenticate to a protected resource. Use of the HTTP "Authorization" header field as defined by <xref target="RFC2617" /> is RECOMMENDED, since HTTP implementations are aware that this header has special security properties and may require special treatment in caches and logs. Protected resources SHOULD take precautions to insure that access tokens are not inadvertently logged or captured.</t>

                <section title="Client Calls Protected Resource Using HTTP Header">
                    <t>The protected resource SHOULD allow clients to make authenticated requests by including the access token in the HTTP "Authorization" header. Prior to making a request, the client MUST have obtained a valid access token and the API request endpoint URI.</t>

                    <t>The client constructs a HTTP request to the API request endpoint URI and includes the HTTP "Authorization" header field with the auth-scheme name set to "OAuth" (case-insensitive).</t>

                    <t>Since the request results in the transmission of plain text credentials in the HTTP request, the protected resource MUST require the use of a transport-layer mechanism such as TLS or SSL (or a secure channel with equivalent protections).</t>

                    <t>For example, the client makes the following HTTPS request:</t>
                    <figure><artwork><![CDATA[
    GET /user/daveman692.json HTTP/1.1
    Host: api.example.com
    Authorization: OAuth oauth_access_token="vF9dft4qmT"
                    ]]></artwork></figure>

                    <t>Note that per <xref target="RFC2617" /> section 1.2 the following request is also valid:</t>
                    <figure><artwork><![CDATA[
    GET /user/daveman692.json HTTP/1.1
    Host: api.example.com
    Authorization:  OAuth  oauth_access_token = vF9dft4qmT
                    ]]></artwork></figure>

                    <t>If the request fails verification, the protected resource SHOULD respond with the appropriate HTTP response status code. The protected resource MAY include further details about why the request was rejected in the response body.</t>

                    <t>For example:</t>
                    <figure><artwork><![CDATA[
    HTTP/1.1 401 Authorization Required
    WWW-Authenticate: OAuth realm="https://api.example.com/"
                    ]]></artwork></figure>
                </section>

                <section title="Client Calls Protected Resource Using URL Query Parameter">
                    <t>The protected resource MAY allow clients to make authenticated requests by including the access token as a URL query parameter. Prior to making a request, the client MUST have obtained a valid access token and the API request endpoint URI.</t>

                    <t>The client constructs the request URI by adding the following REQUIRED query parameter to the API request endpoint:</t>
                    <t><list style="hanging">
                        <t hangText="oauth_access_token">The access token.</t>
                    </list></t>

                    <t>Since the request results in the transmission of plain text credentials in the HTTP request, the protected resource MUST require the use of a transport-layer mechanism such as TLS or SSL (or a secure channel with equivalent protections).</t>

                    <t>For example, the client makes the following HTTPS request:</t>
                    <figure><artwork><![CDATA[
    GET /user/daveman692.json?oauth_access_token=vF9dft4qmT HTTP/1.1
    Host: api.example.com
                    ]]></artwork></figure>

                    <t>If the request fails verification, the protected resource SHOULD respond with the appropriate HTTP response status code. The protected resource MAY include further details about why the request was rejected in the response body.</t>

                    <t>For example:</t>
                    <figure><artwork><![CDATA[
    HTTP/1.1 401 Authorization Required
    WWW-Authenticate: OAuth realm="https://api.example.com/"
                    ]]></artwork></figure>
                </section>

                <section title="Client Calls Protected Resource Using Post Parameter">
                    <t>The protected resource MAY allow clients to make authenticated requests by including the access token as a parameter in the body of a HTTP "POST" request. Prior to making a request, the client MUST have obtained a valid access token and the API request endpoint URI.</t>

                    <t>The client constructs an HTTP "POST" request to the API request endpoint and includes the following REQUIRED parameter:</t>
                    <t><list style="hanging">
                        <t hangText="oauth_access_token">The access token.</t>
                    </list></t>

                    <t>Since the request results in the transmission of plain text credentials in the HTTP request, the protected resource MUST require the use of a transport-layer mechanism such as TLS or SSL (or a secure channel with equivalent protections).</t>

                    <t>For example, the client makes the following HTTPS request:</t>
                    <figure><artwork><![CDATA[
    POST /blog/entry HTTP/1.1
    Host: api.example.com
    oauth_access_token=vF9dft4qmT
                    ]]></artwork></figure>

                    <t>If the request fails verification, the protected resource SHOULD respond with the appropriate HTTP response status code. The protected resource MAY include further details about why the request was rejected in the response body.</t>

                    <t>For example:</t>
                    <figure><artwork><![CDATA[
    HTTP/1.1 401 Authorization Required
    WWW-Authenticate: OAuth realm="https://api.example.com/"
                    ]]></artwork></figure>
                </section>
            </section>

            <section title="Using Signatures" anchor="using_signatures">
                <t>TODO: We need to agree on the signature method though there is a lot of normative text in the OAuth 1.0 spec to draw from.   OAuth 1.0 is about three pages of text assuming people are happy with the mechanism; it would be good to simplify as much as possible. We could modify WRAP's refresh token request to let the client specify that they'd also like an access token secret for that request. This seems like the right way of doing it.</t>
            </section>
        </section>

        <section title="Security Considerations">
            <t>TODO: I'm the wrong person to write this section.</t>
        </section>
    </middle>

    <back>
        <references title="Normative References">
            <reference anchor="RFC2119">
                <front>
                    <title abbrev='RFC Key Words'>Key words for use in RFCs to Indicate Requirement Levels</title>
                    <author initials='B.' surname='Bradner' fullname='Scott Bradner'></author>
                </front>
                <seriesInfo name='BCP' value='14' />
                <seriesInfo name='RFC' value='2119' />
                <format type='TXT' target='ftp://ftp.isi.edu/in-notes/rfc2119.txt' />
                <format type='HTML' target='http://xml.resource.org/public/rfc/html/rfc2119.html' />
            </reference>

            <reference anchor="RFC2616">
                <front>
                    <title abbrev='HTTP/1.1'>Hypertext Transfer Protocol -- HTTP/1.1</title>
                    <author initials='R.' surname='Fielding' fullname='Roy T. Fielding'></author>
                    <author initials='J.' surname='Gettys' fullname='James Gettys'></author>
                    <author initials='J.' surname='Mogul' fullname='Jeffrey C. Mogul'></author>
                    <author initials='H.' surname='Frystyk' fullname='Henrik Frystyk Nielsen'></author>
                    <author initials='L.' surname='Masinter' fullname='Larry Masinter'></author>
                    <author initials='P.' surname='Leach' fullname='Paul J. Leach'></author>
                    <author initials='T.' surname='Berners-Lee' fullname='Tim Berners-Lee'></author>
                </front>
                <seriesInfo name='RFC' value='2616' />
                <format type='TXT' target='http://www.rfc-editor.org/rfc/rfc2616.txt' />
                <format type='HTML' target='http://xml.resource.org/public/rfc/html/rfc2616.html' />
            </reference>

            <reference anchor="RFC2617">
                <front>
                    <title abbrev='HTTP Authentication'>HTTP Authentication: Basic and Digest Access Authentication</title>
                    <author initials='J.' surname='Franks' fullname='John Franks'></author>
                    <author initials='P.M.' surname='Hallam-Baker' fullname='Phillip M. Hallam-Baker'></author>
                    <author initials='J.L.' surname='Hostetler' fullname='Jeffery L. Hostetler'></author>
                    <author initials='S.D.' surname='Lawrence' fullname='Scott D. Lawrence'></author>
                    <author initials='P.J.' surname='Leach' fullname='Paul J. Leach'></author>
                    <author initials='A.' surname='Luotonen' fullname='Ari Luotonen'></author>
                    <author initials='L.' surname='Stewart' fullname='Lawrence C. Stewart'> </author>
                </front>
                <seriesInfo name='RFC' value='2617' />
                <format type='TXT' octets='77638' target='ftp://ftp.isi.edu/in-notes/rfc2617.txt' />
                <format type='HTML' octets='116625' target='http://xml.resource.org/public/rfc/html/rfc2617.html' />
            </reference>

            <reference anchor="RFC3986">
                <front>
                <title abbrev='URI Generic Syntax'>Uniform Resource Identifier (URI): Generic Syntax</title>
                <author initials='T.' surname='Berners-Lee' fullname='Tim Berners-Lee'></author>
                <author initials='R.' surname='Fielding' fullname='Roy T. Fielding'></author>
                <author initials='L.' surname='Masinter' fullname='Larry Masinter'></author>
                </front>
                <seriesInfo name='STD' value='66' />
                <seriesInfo name='RFC' value='3986' />
                <format type='TXT' octets='141811' target='ftp://ftp.isi.edu/in-notes/rfc3986.txt' />
                <format type='HTML' octets='213584' target='http://xml.resource.org/public/rfc/html/rfc3986.html' />
            </reference>

            <reference anchor="W3C.REC-html40-19980424">
                <front>
                    <title abbrev='HTML 4.0'>HTML 4.0 Specification</title>
                    <author initials='D.' surname='Ragget' fullname='Dave Ragget' role="editor"></author>
                    <author initials='A.' surname='Le Hors' fullname='Arnaud Le Hors' role="editor"></author>
                    <author initials='I.' surname='Jacobs' fullname='Ian Jacobs' role="editor"></author>
                </front>
                <seriesInfo name='W3C' value='REC-html40-19980424' />
                <format type='HTML' target='http://www.w3.org/TR/1998/REC-html40-19980424' />
            </reference>
        </references>

        <references title="Informative References">
            <reference anchor="draft-hammer-oauth-10">
                <front>
                    <title>The OAuth 1.0 Protocol</title>
                    <author initials='E.H.L' surname='Hammer-Lahav' fullname='Eran Hammer-Lahav' role='editor'></author>
                </front>
                <format type='TXT' target='http://tools.ietf.org/id/draft-hammer-oauth-10.txt' />
                <format type='HTML' target='http://tools.ietf.org/html/draft-hammer-oauth-10' />
            </reference>

            <reference anchor="draft-hardt-oauth-01">
                <front>
                    <title abbrev='OAuth WRAP'>OAuth Web Resource Authorization Profiles</title>
                    <author initials='B.' surname='Eaton' fullname='Brian Eaton'></author>
                    <author initials='Y.' surname='Goland' fullname='Yaron Goland'></author>
                    <author initials='D.' surname='Hardt' fullname='Dick Hardt' role='editor'></author>
                    <author initials='A.' surname='Tom' fullname='Allen Tom'></author>
                </front>
                <format type='TXT' target='http://www.ietf.org/id/draft-hardt-oauth-01.txt' />
            </reference>
        </references>
    </back>
</rfc>
